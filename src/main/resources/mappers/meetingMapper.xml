<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.javaclassS16.dao.MeetingDAO">
    
	<select id="getMeetingList" resultType="com.spring.javaclassS16.vo.FamilyMeetingVO">
	  SELECT fm.*, 
	         COUNT(mtl.topicIdx) AS topicCount,
	         mf.name AS facilitatorName,
	         mr.name AS recorderName
	  FROM familyMeeting fm
	  LEFT JOIN meetingTopicLink mtl ON fm.idx = mtl.meetingIdx
	  LEFT JOIN member mf ON fm.facilitatorIdx = mf.idx
	  LEFT JOIN member mr ON fm.recorderIdx = mr.idx
	  WHERE fm.familyCode = #{familyCode}
	  <if test="statusFilter != null and statusFilter != ''">
	    AND fm.status = #{statusFilter}
	  </if>
	  GROUP BY fm.idx
	  <choose>
	    <when test="sortBy == 'date'">
	      ORDER BY fm.meetingDate
	    </when>
	    <when test="sortBy == 'status'">
	      ORDER BY 
	        CASE fm.status
	          WHEN '진행 중' THEN '1'
	          WHEN '예정' THEN '2'
	          WHEN '완료' THEN '3'
	          ELSE '4'
	        END
	    </when>
	    <otherwise>
	      ORDER BY fm.createdAt DESC
	    </otherwise>
	  </choose>
	  LIMIT #{startIndexNo}, #{pageSize}
	</select>
	
	<select id="getTotalMeetingsCount" resultType="int">
  	SELECT COUNT(*) FROM familyMeeting WHERE familyCode = #{familyCode}
	</select>
	
	<select id="getCompletedMeetingsCount" resultType="int">
    SELECT COUNT(*) FROM familyMeeting WHERE familyCode = #{familyCode} AND status = '완료'
	</select>
	
	<select id="getUpcomingMeetingsCount" resultType="int">
    SELECT COUNT(*) FROM familyMeeting WHERE familyCode = #{familyCode} AND status = '예정'
	</select>
	
	<select id="getThisMonthMeetingsCount" resultType="int">
    SELECT COUNT(*) FROM familyMeeting 
    WHERE familyCode = #{familyCode} 
    AND YEAR(meetingDate) = YEAR(CURDATE()) 
    AND MONTH(meetingDate) = MONTH(CURDATE())
	</select>
	
	<select id="getMeetingContent" resultType="com.spring.javaclassS16.vo.FamilyMeetingVO">
    SELECT * FROM familyMeeting WHERE familyCode = #{familyCode} AND idx = #{idx}
	</select>
	
	<select id="getMeetingTopics" resultType="com.spring.javaclassS16.vo.MeetingTopicVO">
    SELECT mt.* FROM meetingTopic mt
    JOIN meetingTopicLink mtl ON mt.idx = mtl.topicIdx
    WHERE mtl.meetingIdx = #{meetingIdx}
    ORDER BY mtl.discussionOrder
	</select>
	
	<select id="getUpcomingMeetings" resultType="com.spring.javaclassS16.vo.FamilyMeetingVO">
    SELECT * FROM familyMeeting 
    WHERE meetingDate > NOW() 
    AND familyCode = #{familyCode}
    ORDER BY meetingDate ASC 
    LIMIT 3
  </select>
	
	<select id="getProposedTopics" resultType="com.spring.javaclassS16.vo.MeetingTopicVO">
    SELECT t.*, COUNT(r.idx) as replyCnt
    FROM meetingTopic t
    LEFT JOIN meetingTopicReply r ON t.idx = r.topicIdx
    WHERE t.familyCode = #{familyCode}
    <if test="status != null and status != 'all'">
        AND t.status = #{status}
    </if>
    GROUP BY t.idx
    ORDER BY ${sortBy}, t.createdAt DESC
    LIMIT #{startIndexNo}, #{pageSize}
	</select>
	
	<select id="getTopicReplies" resultType="com.spring.javaclassS16.vo.MeetingTopicReplyVO">
    SELECT * FROM meetingTopicReply
    WHERE topicIdx = #{idx}
    ORDER BY createdAt ASC
  </select>
  
  <select id="getTopicByIdx" resultType="com.spring.javaclassS16.vo.MeetingTopicVO">
    SELECT * FROM meetingTopic WHERE idx = #{idx}
	</select>
	
	<select id="getMeetingLastIdx" resultType="com.spring.javaclassS16.vo.FamilyMeetingVO">
		select * from familyMeeting order by idx desc limit 1; 
	</select>
	
	<select id="getLastTopic" resultType="com.spring.javaclassS16.vo.MeetingTopicVO">
		select * from meetingTopic order by idx desc limit 1; 
	</select>
	
	<select id="getMeetingByIdx" resultType="com.spring.javaclassS16.vo.FamilyMeetingVO">
	  SELECT * FROM familyMeeting WHERE idx = #{idx}
	</select>
	
	<select id="getSelectedTopicIdx" resultType="int">
	  SELECT topicIdx FROM meetingTopicLink WHERE meetingIdx = #{idx}
	</select>
	
	<select id="totRecCnt" resultType="int">
	  SELECT COUNT(*) FROM familyMeeting
	  WHERE familyCode = #{familyCode}
	  <if test="searchString != null and searchString != ''">
	    AND status = #{searchString}
	  </if>
	</select>
	
	<select id="totTopicRecCnt" resultType="int">
	  SELECT COUNT(*) FROM meetingTopic
	  WHERE familyCode = #{familyCode}
	  <if test="searchString != null and searchString != '' and searchString != 'all'">
	    AND status = #{searchString}
	  </if>
	</select>
	
	<select id="getLinkedTopicByIdx" parameterType="int" resultType="com.spring.javaclassS16.vo.MeetingTopicLinkVO">
    SELECT * FROM meetingTopicLink WHERE topicIdx = #{idx}
	</select>
	
	<select id="getAllProposedTopics" resultType="com.spring.javaclassS16.vo.MeetingTopicVO">
    SELECT t.*, COUNT(r.idx) as replyCnt
    FROM meetingTopic t
    LEFT JOIN meetingTopicReply r ON t.idx = r.topicIdx
    WHERE t.familyCode = #{familyCode} AND t.status = #{status}
    GROUP BY t.idx
    ORDER BY t.createdAt DESC
	</select>
	
	
	<insert id="setTopicInput" parameterType="com.spring.javaclassS16.vo.MeetingTopicVO">
    INSERT INTO meetingTopic (familyCode, title, description, priority, memberIdx, memberName, status)
    VALUES (#{topicVO.familyCode}, #{topicVO.title}, #{topicVO.description}, #{topicVO.priority}, #{topicVO.memberIdx}, #{topicVO.memberName}, '제안됨')
	</insert>
	
	<insert id="setMeetingInput" parameterType="com.spring.javaclassS16.vo.FamilyMeetingVO">
    INSERT INTO familyMeeting (familyCode, title, description, meetingDate, duration, facilitatorIdx, facilitatorName, recorderIdx, recorderName, createdBy)
    VALUES (#{vo.familyCode}, #{vo.title}, #{vo.description}, #{vo.meetingDate}, #{vo.duration}, #{vo.facilitatorIdx}, #{vo.facilitatorName}, #{vo.recorderIdx}, #{vo.recorderName}, #{vo.createdBy})
	</insert>
  
  <insert id="linkTopicToMeeting">
    INSERT INTO meetingTopicLink (meetingIdx, topicIdx)
    VALUES (#{meetingIdx}, #{topicIdx})
  </insert>
  
  <insert id="setNewTopic">
	  INSERT INTO meetingTopic (familyCode, title, description, priority, memberIdx, memberName, status)
	  VALUES (#{familyCode}, #{title}, #{description}, #{priority}, #{memberIdx}, #{memberName}, '예정')
	</insert>
  
  <insert id="setReplyInput" parameterType="com.spring.javaclassS16.vo.MeetingTopicReplyVO">
    INSERT INTO meetingTopicReply (topicIdx, memberIdx, memberName, content)
    VALUES (#{replyVO.topicIdx}, #{replyVO.memberIdx}, #{replyVO.memberName}, #{replyVO.content})
	</insert>
  
  
	
	<update id="setSaveMeeting" parameterType="com.spring.javaclassS16.vo.FamilyMeetingVO">
    UPDATE familyMeeting
    SET status = '완료', decisions = #{familyMeetingVO.decisions}, actionItems = #{familyMeetingVO.actionItems}, notes = #{familyMeetingVO.notes}
    WHERE idx = #{familyMeetingVO.idx} AND familyCode = #{familyMeetingVO.familyCode}
	</update>
	
	<update id="updateMeetingTopicsStatus" parameterType="int">
    UPDATE meetingTopic mt
    JOIN meetingTopicLink mtl ON mt.idx = mtl.topicIdx
    SET mt.status = '결정됨'
    WHERE mtl.meetingIdx = #{idx}
	</update>
	
	<update id="setTopicUpdate">
    UPDATE meetingTopic
    SET title = #{topicVO.title}, description = #{topicVO.description}, priority = #{topicVO.priority}, status = #{topicVO.status}
    WHERE idx = #{topicVO.idx}
	</update>
	
	<update id="updateTopicStatus">
    UPDATE meetingTopic SET status = '예정' WHERE idx = #{topicIdx}
	</update>	
	
	<update id="setMeetingUpdate" parameterType="com.spring.javaclassS16.vo.FamilyMeetingVO">
	  UPDATE familyMeeting
	  SET title = #{vo.title}, 
	      description = #{vo.description}, 
	      meetingDate = #{vo.meetingDate}, 
	      duration = #{vo.duration}, 
	      facilitatorIdx = #{vo.facilitatorIdx}, 
	      facilitatorName = #{vo.facilitatorName}, 
	      recorderIdx = #{vo.recorderIdx}, 
	      recorderName = #{vo.recorderName}
	  WHERE idx = #{vo.idx}
	</update>
	
	
	<delete id="setReplyDelete" parameterType="int">
    DELETE FROM meetingTopicReply WHERE idx = #{idx}
	</delete>

	<!-- meetingTopicReply 삭제 -->
	<delete id="setTopicReplyDelete" parameterType="int">
    DELETE FROM meetingTopicReply WHERE topicIdx = #{idx}
	</delete>
	
	<!-- meetingTopicLink 삭제 -->
	<delete id="setTopicLinkDelete" parameterType="int">
    DELETE FROM meetingTopicLink WHERE topicIdx = #{idx}
	</delete>
	
	<!-- meetingTopic 삭제 -->
	<delete id="setTopicDelete" parameterType="int">
    DELETE FROM meetingTopic WHERE idx = #{idx}
	</delete>
	
	<delete id="setRemoveAllTopicLinks">
	  DELETE FROM meetingTopicLink WHERE meetingIdx = #{meetingIdx}
	</delete>

	<delete id="setMeetingTopicLink" parameterType="int">
	  DELETE FROM meetingTopicLink WHERE meetingIdx = #{idx};
	</delete>

	<delete id="setMeetingDelete" parameterType="int">
	  DELETE FROM familyMeeting WHERE idx = #{idx};
	</delete>

</mapper>