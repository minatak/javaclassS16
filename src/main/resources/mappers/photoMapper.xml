<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.javaclassS16.dao.PhotoDAO">
    
    <select id="getPhotoList" resultType="com.spring.javaclassS16.vo.PhotoVO">
		    SELECT p.*, IFNULL(r.replyCnt, 0) as replyCnt
		    FROM photo p
		    LEFT JOIN (
		        SELECT photoIdx, COUNT(*) as replyCnt
		        FROM photoReply
		        GROUP BY photoIdx
		    ) r ON p.idx = r.photoIdx
		    WHERE p.familyCode = #{familyCode}
		    ORDER BY
		    <choose>
		        <when test="choice == '추천순'">p.goodCount DESC</when>
		        <when test="choice == '조회순'">p.readNum DESC</when>
		        <when test="choice == '댓글순'">IFNULL(r.replyCnt, 0) DESC</when>
		        <when test="choice == '오래된순'">p.idx ASC</when>
		        <otherwise>p.idx DESC</otherwise>
		    </choose>
		    LIMIT #{startIndexNo}, #{pageSize}
		</select>
    
    <select id="getPhotoContent" resultType="com.spring.javaclassS16.vo.PhotoVO">
        SELECT * FROM photo
        WHERE idx = #{idx}
    </select>
    
    <select id="getPhotoReplyCount" resultType="int">
		    SELECT COUNT(*) FROM photoReply WHERE photoIdx = #{idx}
		</select>
    
    <select id="getPhotoReply" resultType="com.spring.javaclassS16.vo.PhotoReplyVO">
		    SELECT idx, photoIdx, mid, name, prDate, content, parentIdx 
		    FROM photoReply 
		    WHERE photoIdx = #{idx} 
		    ORDER BY 
		        CASE WHEN parentIdx IS NULL THEN idx ELSE parentIdx END DESC,
		        CASE WHEN parentIdx IS NULL THEN 0 ELSE idx END ASC
		</select>
		
		<select id="getPhotoReplyVo" resultType="com.spring.javaclassS16.vo.PhotoReplyVO">
			select * FROM photoReply WHERE idx = #{idx}
		</select>
		
		<select id="getLatestReply" resultType="com.spring.javaclassS16.vo.PhotoReplyVO">
		    SELECT * FROM photoReply WHERE photoIdx = #{idx} ORDER BY idx DESC LIMIT 1
		</select>
    
    <select id="getMemberVoByMid" resultType="com.spring.javaclassS16.vo.MemberVO">
        SELECT * FROM member WHERE mid = #{mid}
    </select>
    
    <select id="getWriterPhoto" resultType="com.spring.javaclassS16.vo.MemberVO">
        SELECT * FROM member WHERE idx = #{idx}
    </select>
    
    <select id="getPhotoLike" resultType="boolean">
        SELECT COUNT(*) > 0 FROM photoLikes WHERE photoIdx = #{idx} AND memberIdx = #{memberIdx}
    </select>
    
    <select id="getPreNexSearch" resultType="com.spring.javaclassS16.vo.PhotoVO">
		  <if test="str == 'preVo'">
		    select idx from photo where familyCode = #{familyCode} and <![CDATA[idx < #{idx}]]> order by idx desc limit 1;
		  </if>
		  <if test="str != 'preVo'">
		    select idx from photo where familyCode = #{familyCode} and <![CDATA[idx > #{idx}]]> order by idx limit 1;
		  </if>
		</select>
		
		<select id="getPhotoParentReplyCheck" resultType="com.spring.javaclassS16.vo.PhotoReplyVO">
		  select * from photoReply where photoIdx = #{photoIdx} order by idx desc limit 1;
		</select>
    
    <select id="getPhotoLikers" parameterType="int" resultType="com.spring.javaclassS16.vo.MemberVO">
	    SELECT m.idx, m.mid, m.name, m.photo
	    FROM member m
	    JOIN photoLikes pl ON m.idx = pl.memberIdx
	    WHERE pl.photoIdx = #{photoIdx}
	    ORDER BY pl.idx DESC
		</select>
    
    
    <insert id="setPhotoInput" parameterType="com.spring.javaclassS16.vo.PhotoVO">
        INSERT INTO photo (memberIdx, name, familyCode, description, content, photoCount, thumbnail, pDate)
        VALUES (#{vo.memberIdx}, #{vo.name}, #{vo.familyCode}, #{vo.description}, #{vo.content}, #{vo.photoCount}, #{vo.thumbnail}, NOW())
    </insert>
    
    <insert id="addPhotoLike">
        INSERT INTO photoLikes (photoIdx, memberIdx) VALUES (#{idx}, #{memberIdx})
    </insert>
    
    <insert id="setPhotoReplyInput">
		    INSERT INTO photoReply (photoIdx, mid, name, content, parentIdx)
		    VALUES (#{vo.photoIdx}, #{vo.mid}, #{vo.name}, #{vo.content}, #{vo.parentIdx})
		</insert>
    
    <update id="setPhotoReadNumPlus">
        UPDATE photo SET readNum = readNum + 1 WHERE idx = #{idx}
    </update>
    
    <update id="increasePhotoLikeCount">
        UPDATE photo SET goodCount = goodCount + 1 WHERE idx = #{idx}
    </update>
    
    <update id="decreasePhotoLikeCount">
        UPDATE photo SET goodCount = goodCount - 1 WHERE idx = #{idx}
    </update>
    
    <update id="setPhotoUpdate">
		  update photo set description=#{vo.description}, content=#{vo.content}, photoCount=#{vo.photoCount}, thumbnail=#{vo.thumbnail} where idx=#{vo.idx};
		</update>
    
    
     <delete id="removePhotoLike">
        DELETE FROM photoLikes WHERE photoIdx = #{idx} AND memberIdx = #{memberIdx}
    </delete>
    
    <delete id="setPhotoReplyDelete">
		    DELETE FROM photoReply WHERE idx = #{idx} 
		</delete>
    
    <delete id="setPhotoReplyDeleteByParentIdx">
		    DELETE FROM photoReply WHERE parentIdx = #{idx}
		</delete>
    
    <delete id="setPhotoDelete">
		    DELETE FROM photo WHERE idx = #{idx}
		</delete>
    
    <delete id="deletePhotoReply">
		   WITH RECURSIVE cte AS (
		      SELECT idx FROM photoReply WHERE photoIdx = #{idx}
		      UNION ALL
		      SELECT pr.idx FROM photoReply pr
		      INNER JOIN cte ON pr.parentIdx = cte.idx
		  )
		  DELETE FROM photoReply WHERE idx IN (SELECT idx FROM cte);
		</delete>

</mapper>